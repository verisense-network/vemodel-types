{"version":3,"sources":["../src/index.ts","../src/types.ts"],"sourcesContent":["export * from \"./types\";\n","import { TypeRegistry } from \"@polkadot/types\";\nimport {\n  Bool,\n  Enum,\n  i64,\n  Null,\n  Option,\n  Struct,\n  Text,\n  u128,\n  u32,\n  u64,\n  u8,\n  U8aFixed,\n  Vec,\n} from \"@polkadot/types-codec\";\nimport {\n  AnyU8a,\n  Codec,\n  CodecClass,\n  Registry,\n  U8aBitLength,\n} from \"@polkadot/types-codec/types\";\n\nexport type TypesDef<T = Codec> = Record<string, string | CodecClass<T>>;\n\nexport const registry = new TypeRegistry();\n\n/**\n * rust types from verisense vemodel\n * https://github.com/verisense-network/veforum/blob/main/vemodel/src/lib.rs\n */\n\n/**\n * \npub struct AccountId(pub [u8; 32]);\n\npub type Pubkey = AccountId;\n\npub struct Signature(pub [u8; 64]);\n\npub type CommunityId = u32;\npub type EventId = u64;\npub type ContentId = u128;\n */\n\n// export const AccountId = GenericAccountId32;\n\n/**\npub struct H160(pub [u8; 20]);\npub type AccountId = H160;\n */\n\nexport class H160 extends U8aFixed {\n  constructor(registry: Registry, value?: AnyU8a, bitLength?: U8aBitLength) {\n    super(registry, value, 160); // 160 位 = 20 字节\n  }\n}\n\nexport const AccountId = H160;\n\n// export const Signature = U8aFixed.with(512);\n/**\n * \n    pub struct EcdsaSignature(pub [u8; 65]);\n */\n\nexport class EcdsaSignature extends U8aFixed {\n  constructor(registry: Registry, value?: AnyU8a, bitLength?: U8aBitLength) {\n    super(registry, value, 520); // 520 位 = 65 字节\n  }\n}\n\nexport const Pubkey = AccountId;\n\nexport const CommunityId = u32;\nexport const EventId = u64;\nexport const ContentId = u128;\n\n/**\n * \npub struct TokenMetadata {\n    pub symbol: String,\n    pub total_issuance: u64,\n    pub decimals: u8,\n    pub contract: AccountId,\n    pub image: Option<String>,\n}\n */\nexport const TokenMetadata = Struct.with({\n  symbol: Text,\n  total_issuance: u64,\n  decimals: u8,\n  contract: AccountId,\n  image: Option.with(Text),\n});\n\n/**\n * \npub enum LlmVendor {\n    OpenAI { key: String },\n    DeepSeek { key: String, host: String },\n}\n */\nexport const LlmVendor = Enum.with({\n  OpenAI: Struct.with({ key: Text }),\n  DeepSeek: Struct.with({ key: Text, host: Text }),\n});\n\n/**\n * \npub enum CommunityStatus {\n    PendingCreation,\n    WaitingTx(u64),\n    CreateFailed(String),\n    Active,\n    Frozen(u64),\n    TokenIssued(String),\n}\n */\nexport const CommunityStatus = Enum.with({\n  PendingCreation: Null,\n  WaitingTx: u64,\n  CreateFailed: Text,\n  Active: Null,\n  Frozen: u64,\n  TokenIssued: Text,\n});\n\nexport type AccountId = string;\n\nexport type TokenMetadata = {\n  name: string;\n  symbol: string;\n  total_issuance: number;\n  decimals: number;\n  new_issue: boolean;\n  contract: string | null;\n  image: string | null;\n};\n\nexport type LlmVendor = {\n  OpenAI: {\n    key: string;\n  };\n  DeepSeek: {\n    key: string;\n    host: string;\n  };\n};\n\nexport type CommunityStatus = {\n  PendingCreation: null;\n  WaitingTx: number;\n  CreateFailed: string;\n  Active: null;\n  Frozen: number;\n  TokenIssued: string;\n};\n\nexport type Community = {\n  id: string;\n  logo: string;\n  name: string;\n  slug: string;\n  description: string;\n  token_info: TokenMetadata;\n  prompt: string;\n  creator: AccountId;\n  agent_pubkey: AccountId;\n  // llm_vendor: LlmVendor;\n  llm_vendor: any;\n  llm_assistant_id: string;\n  status: CommunityStatus;\n  created_time: number;\n};\n\n/**\n * \npub struct Community {\n    pub id: String,\n    pub private: bool,\n    pub logo: String,\n    pub name: String,\n    pub slug: String,\n    pub description: String,\n    pub token_info: TokenMetadata,\n    pub prompt: String,\n    pub creator: AccountId,\n    pub agent_pubkey: AccountId,\n    pub llm_vendor: LlmVendor,\n    pub llm_assistant_id: String,\n    pub status: CommunityStatus,\n    pub created_time: i64,\n}\n */\nexport const Community = Struct.with({\n  id: Text,\n  private: Bool,\n  logo: Text,\n  name: Text,\n  slug: Text,\n  description: Text,\n  token_info: TokenMetadata,\n  prompt: Text,\n  creator: AccountId,\n  agent_pubkey: AccountId,\n  llm_vendor: LlmVendor,\n  llm_assistant_id: Text,\n  status: CommunityStatus,\n  created_time: i64,\n});\n\nexport enum LLmName {\n  OpenAI = \"OpenAI\",\n  DeepSeek = \"DeepSeek\",\n}\n/**\n * \n    type SignedArgs<T> = Args<T, EcdsaSignature>;\n  \n    pub struct Args<T, S> {\n        pub signature: S,\n        pub signer: AccountId,\n        pub nonce: u64,\n        pub payload: T,\n    }\n */\nexport function createWithArgs<T extends CodecClass<Struct<any>>>(\n  payload: T,\n  signature = EcdsaSignature\n) {\n  return Struct.with({\n    signature,\n    signer: AccountId,\n    nonce: u64,\n    payload,\n  });\n}\n\n/**\n    pub struct TokenMetadataArg {\n        pub name: String,\n        pub symbol: String,\n        pub total_issuance: u64,\n        pub decimals: u8,\n        pub new_issue: bool,\n        pub contract: Option<String>,\n        pub image: Option<String>,\n    }\n */\nexport const TokenMetadataArg = Struct.with({\n  name: Text,\n  symbol: Text,\n  total_issuance: u64,\n  decimals: u8,\n  new_issue: Bool,\n  contract: Option.with(Text),\n  image: Option.with(Text),\n});\n\n/**\n    pub struct CreateCommunityArg {\n        pub name: String,\n        pub private: bool,\n        pub logo: String,\n        pub token: TokenMetadataArg,\n        pub slug: String,\n        pub description: String,\n        pub prompt: String,\n        pub llm_name: String,\n        pub llm_api_host: Option<String>,\n        pub llm_key: Option<String>,\n    }\n */\nexport const CreateCommunityPayload = Struct.with({\n  name: Text,\n  private: Bool,\n  logo: Text,\n  token: TokenMetadataArg,\n  slug: Text,\n  description: Text,\n  prompt: Text,\n  llm_name: Text,\n  llm_api_host: Option.with(Text),\n  llm_key: Option.with(Text),\n});\n\nexport const CreateCommunityArg = createWithArgs(CreateCommunityPayload);\n\n/**\n    pub struct PostThreadArg {\n        pub community: String,\n        pub title: String,\n        pub content: Vec<u8>,\n        pub images: Vec<String>,\n        pub mention: Vec<AccountId>,\n    }\n */\nexport const PostThreadPayload = Struct.with({\n  community: Text,\n  title: Text,\n  content: Vec.with(u8),\n  images: Vec.with(Text),\n  mention: Vec.with(AccountId),\n});\n\nexport const PostThreadArg = createWithArgs(PostThreadPayload);\n\n/**\n    pub struct PostCommentArg {\n        pub thread: ContentId,\n        pub content: Vec<u8>,\n        pub images: Vec<String>,\n        pub mention: Vec<AccountId>,\n        pub reply_to: Option<ContentId>,\n    }\n */\nexport const PostCommentPayload = Struct.with({\n  thread: ContentId,\n  content: Vec.with(u8),\n  images: Vec.with(Text),\n  mention: Vec.with(AccountId),\n  reply_to: Option.with(ContentId),\n});\n\nexport const PostCommentArg = createWithArgs(PostCommentPayload);\n\n/**\n * \n    pub struct ActivateCommunityArg {\n        pub community: String,\n        pub tx: String,\n    }\n */\nexport const ActivateCommunityArg = Struct.with({\n  community: Text,\n  tx: Text,\n});\n\n/**\npub struct Account {\n    pub nonce: u64,\n    pub address: H160,\n    pub max_invite_block: u64,\n    pub alias: Option<String>,\n    pub last_post_at: i64,\n}\n */\nexport const Account = Struct.with({\n  nonce: u64,\n  address: H160,\n  max_invite_block: u64,\n  alias: Option.with(Text),\n  last_post_at: i64,\n});\n\n/**\npub enum AccountData {\n    Pubkey(Account),\n    AliasOf(AccountId),\n}\n */\n\nexport const AccountData = Enum.with({\n  Pubkey: Account,\n  AliasOf: AccountId,\n});\n\n/**\n    pub struct SetAliasArg {\n        pub alias: String,\n    }\n */\nexport const SetAliasPayload = Struct.with({\n  alias: Text,\n});\n\nexport const SetAliasArg = createWithArgs(SetAliasPayload);\n\n/**\n * \npub struct RewardPayload {\n    pub payload: Vec<u8>,\n    pub signature: Vec<u8>,\n    pub agent_contract: AccountId,\n    pub token_symbol: String,\n    pub token_contract: AccountId,\n    pub withdrawed: bool,\n}\n */\nexport const RewardPayload = Struct.with({\n  payload: Vec.with(u8),\n  signature: Vec.with(u8),\n  agent_contract: AccountId,\n  token_symbol: Text,\n  token_contract: AccountId,\n  withdrawed: Bool,\n});\n\n/**\n * \n    pub struct InviteUserArgs {\n        pub community: String,\n        pub invitee: AccountId\n    }\n */\nexport const InviteUserPayload = Struct.with({\n  community: Text,\n  invitee: AccountId,\n});\n\nexport const InviteUserArg = createWithArgs(InviteUserPayload);\n\n/**\n * \n    pub struct GenerateInviteCodeArgs {\n        pub community: String,\n        pub tx: String,\n    }\n */\nexport const GenerateInviteCodePayload = Struct.with({\n  community: Text,\n  tx: Text,\n});\n\nexport const GenerateInviteCodeArgs = createWithArgs(GenerateInviteCodePayload);\n\nregistry.register({\n  EcdsaSignature,\n  Account,\n  AccountId,\n  H160,\n  Pubkey,\n  CommunityId,\n  EventId,\n  ContentId,\n  TokenMetadataArg,\n  CreateCommunityArg,\n  PostThreadArg,\n  ActivateCommunityArg,\n  PostCommentArg,\n  AccountData,\n  SetAliasArg,\n  RewardPayload,\n  InviteUserPayload,\n  InviteUserArg,\n  GenerateInviteCodePayload,\n  GenerateInviteCodeArgs,\n});\n"],"mappings":"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","names":["registry","LLmName"]}